/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.abc.desktop;

import romanow.abc.core.DBRequest;
import romanow.abc.core.entity.Entity;
import romanow.abc.core.entity.EntityList;
import romanow.abc.core.entity.baseentityes.JEmpty;
import romanow.abc.core.entity.subjectarea.WorkSettings;
import retrofit2.Response;
import romanow.lep500.LEP500Params;

import javax.swing.*;
import java.awt.event.KeyEvent;
import java.io.IOException;

/**
 *
 * @author romanow
 */
public class LEP500ParamsPanel extends LEP500BasePanel {
    private final static String WinModes[]={"прямоугольник","треугольник","синус","парабола"};
    EntityPanelUni paramsList;
    EntityList<LEP500Params> list = new EntityList<>();
    public LEP500ParamsPanel() {
        initComponents();
        }
    public void initPanel(MainBaseFrame main0){
        super.initPanel(main0);
        WinFun.removeAll();
        for(String ss : WinModes)
            WinFun.add(ss);
        paramsList  = new EntityPanelUni(10, 15, list, "LEP500Params", main,true,0,0) {
            @Override
            public EntityList<Entity> getLazy(){
                return  null;
                }
            @Override
            public boolean isRecordSelected(Entity ent) {
                return true;
                }
            @Override
            public void showRecord() {
                showParams();
            }
            @Override
            public void updateRecord() {
                updateParams();
            }
        };
        //=================================================================================================================
        add(paramsList);        
        }
    public void showParams(){
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        K1.setText(String.format("%5.2f",params.K1).replace(",","."));
        K2.setText(String.format("%5.2f",params.K2).replace(",","."));
        K3.setText(String.format("%5.2f",params.K3).replace(",","."));
        K4.setText(String.format("%5.2f",params.K4).replace(",","."));
        K5.setText(String.format("%5.2f",params.K5).replace(",","."));
        K6.setText(String.format("%5.2f",params.K6).replace(",","."));
        K7.setText(String.format("%5.2f",params.K7).replace(",","."));
        NTrendPoints.setText(""+params.nTrendPoints);
        NTrendPointsSpectrum.setText(""+params.nTrendPointsSpectrum);
        FirstFreq.setText(""+params.FirstFreq);
        LastFreq.setText(""+params.LastFreq);
        AmplLevelProc.setText(""+params.amplLevelProc);
        PowerLevelProc.setText(""+params.powerLevelProc);
        P_BlockSize.setText(""+params.p_BlockSize);
        P_OverProc.setText(""+params.p_OverProc);
        WinFun.select(params.winFun);
        ParamListName.setText(params.paramListName);
        KSmooth.setText(""+params.kSmooth);
        }
    public void updateParams(){
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        P_BlockSize = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        FirstFreq = new javax.swing.JTextField();
        LastFreq = new javax.swing.JTextField();
        NTrendPoints = new javax.swing.JTextField();
        NTrendPointsSpectrum = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        P_OverProc = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        AmplLevelProc = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        K1 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        PowerLevelProc = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        K2 = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        K3 = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        K4 = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        K5 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        K6 = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        K7 = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        WinFun = new java.awt.Choice();
        ParamListName = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        KSmooth = new javax.swing.JTextField();

        setDoubleBuffered(false);
        setLayout(null);

        P_BlockSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                P_BlockSizeKeyPressed(evt);
            }
        });
        add(P_BlockSize);
        P_BlockSize.setBounds(310, 240, 70, 25);

        jLabel18.setText("Верхняя граница частоты диапазона макс.");
        add(jLabel18);
        jLabel18.setBounds(20, 130, 250, 14);

        jLabel20.setText("Точек при удалении тренда в спектре");
        add(jLabel20);
        jLabel20.setBounds(20, 220, 230, 14);

        FirstFreq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FirstFreqKeyPressed(evt);
            }
        });
        add(FirstFreq);
        FirstFreq.setBounds(310, 90, 70, 25);

        LastFreq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LastFreqKeyPressed(evt);
            }
        });
        add(LastFreq);
        LastFreq.setBounds(310, 120, 70, 25);

        NTrendPoints.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NTrendPointsKeyPressed(evt);
            }
        });
        add(NTrendPoints);
        NTrendPoints.setBounds(310, 180, 70, 25);

        NTrendPointsSpectrum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NTrendPointsSpectrumKeyPressed(evt);
            }
        });
        add(NTrendPointsSpectrum);
        NTrendPointsSpectrum.setBounds(310, 210, 70, 25);

        jLabel21.setText("Количество блоков по 1024 отсчета");
        add(jLabel21);
        jLabel21.setBounds(20, 250, 210, 14);

        P_OverProc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                P_OverProcKeyPressed(evt);
            }
        });
        add(P_OverProc);
        P_OverProc.setBounds(310, 270, 70, 25);

        jLabel22.setText("Вид функции окна");
        add(jLabel22);
        jLabel22.setBounds(20, 310, 140, 14);

        jLabel23.setText("Процент перекрытия окна");
        add(jLabel23);
        jLabel23.setBounds(20, 280, 250, 14);
        add(jSeparator2);
        jSeparator2.setBounds(20, 80, 360, 10);

        AmplLevelProc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AmplLevelProcKeyPressed(evt);
            }
        });
        add(AmplLevelProc);
        AmplLevelProc.setBounds(310, 330, 70, 25);

        jLabel33.setText("Сглаживание (итераций)");
        add(jLabel33);
        jLabel33.setBounds(20, 160, 260, 10);

        K1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                K1KeyPressed(evt);
            }
        });
        add(K1);
        K1.setBounds(470, 90, 70, 25);

        jLabel34.setText("Уровень амплитуды пика для отсечения (%)");
        add(jLabel34);
        jLabel34.setBounds(20, 340, 260, 14);

        jLabel35.setText("K1");
        add(jLabel35);
        jLabel35.setBounds(420, 100, 30, 10);

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel28.setText("Название");
        add(jLabel28);
        jLabel28.setBounds(20, 50, 130, 14);

        PowerLevelProc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PowerLevelProcKeyPressed(evt);
            }
        });
        add(PowerLevelProc);
        PowerLevelProc.setBounds(310, 360, 70, 25);

        jLabel37.setText("Уровень мощности  пика для отсечения  (%)");
        add(jLabel37);
        jLabel37.setBounds(20, 370, 260, 14);

        K2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                K2KeyPressed(evt);
            }
        });
        add(K2);
        K2.setBounds(470, 120, 70, 25);

        jLabel38.setText("K2");
        add(jLabel38);
        jLabel38.setBounds(420, 130, 30, 10);

        K3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                K3KeyPressed(evt);
            }
        });
        add(K3);
        K3.setBounds(470, 150, 70, 25);

        jLabel39.setText("K3");
        add(jLabel39);
        jLabel39.setBounds(420, 160, 30, 10);

        K4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                K4KeyPressed(evt);
            }
        });
        add(K4);
        K4.setBounds(470, 180, 70, 25);

        jLabel40.setText("K4");
        add(jLabel40);
        jLabel40.setBounds(420, 190, 30, 10);

        K5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                K5KeyPressed(evt);
            }
        });
        add(K5);
        K5.setBounds(470, 210, 70, 25);

        jLabel41.setText("K5");
        add(jLabel41);
        jLabel41.setBounds(420, 220, 30, 10);

        K6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                K6KeyPressed(evt);
            }
        });
        add(K6);
        K6.setBounds(470, 240, 70, 25);

        jLabel42.setText("K6");
        add(jLabel42);
        jLabel42.setBounds(420, 250, 30, 10);

        K7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                K7KeyPressed(evt);
            }
        });
        add(K7);
        K7.setBounds(470, 270, 70, 25);

        jLabel43.setText("K7");
        add(jLabel43);
        jLabel43.setBounds(420, 280, 30, 10);

        WinFun.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                WinFunItemStateChanged(evt);
            }
        });
        add(WinFun);
        WinFun.setBounds(230, 300, 150, 20);

        ParamListName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ParamListNameKeyPressed(evt);
            }
        });
        add(ParamListName);
        ParamListName.setBounds(160, 50, 380, 25);

        jLabel29.setText("Нижняя граница частоты диапазона макс.");
        add(jLabel29);
        jLabel29.setBounds(20, 100, 240, 14);

        jLabel36.setText("Точек при удалении тренда в волне");
        add(jLabel36);
        jLabel36.setBounds(20, 190, 260, 14);

        KSmooth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                KSmoothKeyPressed(evt);
            }
        });
        add(KSmooth);
        KSmooth.setBounds(310, 150, 70, 25);
    }// </editor-fold>//GEN-END:initComponents

    private void P_BlockSizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_P_BlockSizeKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.p_BlockSize = Integer.parseInt(P_BlockSize.getText());
        } catch (Exception ee){
            popup("Недопустимый формат целого");
            return;
        }
        updateSettings(evt,"p_BlockSize");
        refresh();

    }//GEN-LAST:event_P_BlockSizeKeyPressed

    private void FirstFreqKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FirstFreqKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.FirstFreq = Double.parseDouble(FirstFreq.getText());
        } catch (Exception ee){
            popup("Недопустимый формат вещественного");
            return;
        }
        updateSettings(evt,"FirstFreq");
        refresh();
    }//GEN-LAST:event_FirstFreqKeyPressed

    private void LastFreqKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LastFreqKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.LastFreq = Double.parseDouble(LastFreq.getText());
        } catch (Exception ee){
            popup("Недопустимый формат вещественного");
            return;
        }
        updateSettings(evt,"LastFreq");
        refresh();

    }//GEN-LAST:event_LastFreqKeyPressed

    private void NTrendPointsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NTrendPointsKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.nTrendPoints = Integer.parseInt(NTrendPoints.getText());
        } catch (Exception ee){
            popup("Недопустимый формат целого");
            return;
            }
        updateSettings(evt,"nTrendPoints");
        refresh();

    }//GEN-LAST:event_NTrendPointsKeyPressed

    private void NTrendPointsSpectrumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NTrendPointsSpectrumKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.nTrendPointsSpectrum = Integer.parseInt(NTrendPointsSpectrum.getText());
        } catch (Exception ee){
            popup("Недопустимый формат целого");
            return;
        }
        updateSettings(evt,"nTrendPointsSpectrum");
        refresh();
    }//GEN-LAST:event_NTrendPointsSpectrumKeyPressed

    private void P_OverProcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_P_OverProcKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.p_OverProc = Integer.parseInt(P_OverProc.getText());
        } catch (Exception ee){
            popup("Недопустимый формат целого");
            return;
        }
        updateSettings(evt,"p_OverProc");
        refresh();
    }//GEN-LAST:event_P_OverProcKeyPressed

    private void setIPPortVisible(){
        }

    private void AmplLevelProcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AmplLevelProcKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.amplLevelProc = Integer.parseInt(AmplLevelProc.getText());
        } catch (Exception ee){
            popup("Недопустимый формат целого");
            return;
        }
        updateSettings(evt,"amplLevelProc");
        refresh();
    }//GEN-LAST:event_AmplLevelProcKeyPressed

    private void K1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_K1KeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.K1 = Double.parseDouble(K1.getText());
            } catch (Exception ee){
                popup("Недопустимый формат вещественного");
                return;
                }
        updateSettings(evt,"K1");
        refresh();
    }//GEN-LAST:event_K1KeyPressed

    private void PowerLevelProcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PowerLevelProcKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.powerLevelProc = Integer.parseInt(PowerLevelProc.getText());
            } catch (Exception ee){
                popup("Недопустимый формат целого");
                return;
                }
        updateSettings(evt,"powerLevelProc");
        refresh();
    }//GEN-LAST:event_PowerLevelProcKeyPressed

    private void K2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_K2KeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.K2 = Double.parseDouble(K2.getText());
        } catch (Exception ee){
            popup("Недопустимый формат вещественного");
            return;
        }
        updateSettings(evt,"K2");
        refresh();
    }//GEN-LAST:event_K2KeyPressed

    private void K3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_K3KeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.K3 = Double.parseDouble(K3.getText());
        } catch (Exception ee){
            popup("Недопустимый формат вещественного");
            return;
        }
        updateSettings(evt,"K3");
        refresh();
    }//GEN-LAST:event_K3KeyPressed

    private void K4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_K4KeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.K4 = Double.parseDouble(K4.getText());
        } catch (Exception ee){
            popup("Недопустимый формат вещественного");
            return;
        }
        updateSettings(evt,"K4");
        refresh();

    }//GEN-LAST:event_K4KeyPressed

    private void K5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_K5KeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.K5 = Double.parseDouble(K5.getText());
        } catch (Exception ee){
            popup("Недопустимый формат вещественного");
            return;
        }
        updateSettings(evt,"K5");
        refresh();

    }//GEN-LAST:event_K5KeyPressed

    private void K6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_K6KeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.K6 = Double.parseDouble(K6.getText());
        } catch (Exception ee){
            popup("Недопустимый формат вещественного");
            return;
        }
        updateSettings(evt,"K6");
        refresh();
    }//GEN-LAST:event_K6KeyPressed

    private void K7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_K7KeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.K7 = Double.parseDouble(K7.getText());
        } catch (Exception ee){
            popup("Недопустимый формат вещественного");
            return;
        }
        updateSettings(evt,"K7");
        refresh();
    }//GEN-LAST:event_K7KeyPressed

    private void ParamListNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ParamListNameKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        params.paramListName = ParamListName.getText();
        updateSettings(evt,"paramListName");
        refresh();
    }//GEN-LAST:event_ParamListNameKeyPressed

    private void WinFunItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_WinFunItemStateChanged
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.winFun = WinFun.getSelectedIndex();
            } catch (Exception ee){
            popup("Недопустимый формат вещественного");
            return;
            }
        updateSettings(null,"winFun");
        popup("параметр \"Вид окна\"обновлен");
        refresh();

    }//GEN-LAST:event_WinFunItemStateChanged

    private void KSmoothKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KSmoothKeyPressed
        if(evt.getKeyCode()!=10) return;
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        try {
            params.kSmooth = Integer.parseInt(KSmooth.getText());
        } catch (Exception ee){
            popup("Недопустимый формат целого");
            return;
        }
        updateSettings(evt,"kSmooth");
        refresh();
    }//GEN-LAST:event_KSmoothKeyPressed

    @Override
    public void refresh() {
        showParams();
        }

    @Override
    public void eventPanel(int code, int par1, long par2, String par3, Object oo) {
        }

    @Override
    public void shutDown() {
    }

    private void updateSettings(KeyEvent evt, String name){
        LEP500Params params = (LEP500Params) paramsList.current;
        if (params==null)
            return;
        Response<JEmpty> wsr = null;
        try {
            wsr = main.service.updateEntityField(main.debugToken,name,new DBRequest(params,main.gson)).execute();
            if (!wsr.isSuccessful()){
                popup("Ошибка обновления параметров  " + httpError(wsr));
                return;
                }
            //popup("Параметры обновлены");
            if (evt!=null)
                main.viewUpdate(evt,true);
            } catch (IOException e) {
                main.viewUpdate(evt,false);
                popup(e.toString());
                }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AmplLevelProc;
    private javax.swing.JTextField FirstFreq;
    private javax.swing.JTextField K1;
    private javax.swing.JTextField K2;
    private javax.swing.JTextField K3;
    private javax.swing.JTextField K4;
    private javax.swing.JTextField K5;
    private javax.swing.JTextField K6;
    private javax.swing.JTextField K7;
    private javax.swing.JTextField KSmooth;
    private javax.swing.JTextField LastFreq;
    private javax.swing.JTextField NTrendPoints;
    private javax.swing.JTextField NTrendPointsSpectrum;
    private javax.swing.JTextField P_BlockSize;
    private javax.swing.JTextField P_OverProc;
    private javax.swing.JTextField ParamListName;
    private javax.swing.JTextField PowerLevelProc;
    private java.awt.Choice WinFun;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
