/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.abc.desktop;

import retrofit2.Call;
import retrofit2.Response;
import romanow.abc.core.DBRequest;
import romanow.abc.core.UniException;
import romanow.abc.core.constants.ConstValue;
import romanow.abc.core.constants.OidList;
import romanow.abc.core.constants.Values;
import romanow.abc.core.entity.Entity;
import romanow.abc.core.entity.baseentityes.JEmpty;
import romanow.abc.core.entity.subjectarea.MeasureFile;
import romanow.abc.core.entity.subjectarea.PowerLine;
import romanow.abc.core.entity.subjectarea.Support;
import romanow.lep500.AnalyseResult;
import romanow.lep500.LEP500Params;
import romanow.lep500.fft.ExtremeFacade;
import romanow.lep500.fft.ExtremeList;
import romanow.lep500.fft.ExtremeNull;
import romanow.lep500.fft.FFTStatistic;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;

/**
 *
 * @author romanow0
 */
public class LEP500Example extends LEP500BasePanel {
    public final static HashMap<Integer,String> StateColors=new HashMap<>();{
        StateColors.put(Values.MSUndefined,"/drawable/status_gray.png");
        StateColors.put(Values.MSNormal,"/drawable/status_green.png");
        StateColors.put(Values.MSNormalMinus,"/drawable/status_light_green.png");
        StateColors.put(Values.MSNoise,"/drawable/status_red.png");
        StateColors.put(Values.MSLowLevel,"/drawable/status_red.png");
        StateColors.put(Values.MSNoPeak,"/drawable/status_gray.png");
        StateColors.put(Values.MSSecond1,"/drawable/status_red.png");
        StateColors.put(Values.MSSecond2,"/drawable/status_yellow.png");
        StateColors.put(Values.MSSumPeak1,"/drawable/status_light_red.png");
        StateColors.put(Values.MSSumPeak2,"/drawable/status_light_yellow.png");
        }
    private HashMap<Integer,String> analyseStateList = new HashMap<>();
    private ArrayList<ConstValue> resultStates = new ArrayList<>();
    private ArrayList<String> criterisList= new ArrayList<>();
    private ArrayList<MeasureFile> measureFiles = new ArrayList<>();
    private ArrayList<MeasureFile> selectedFiles = new ArrayList<>();
    private ArrayList<PowerLine> lines = new ArrayList<>();
    private ArrayList<Support> supports = new ArrayList<>();
    private ArrayList<LEP500Params> params = new ArrayList<>();
    private ArrayList<AnalyseResult> results = new ArrayList<>();
    private AnalyseResult selectedResult=null;
    /**
     * Creates new form LEP500Example
     */
    public LEP500Example() {
        initComponents();
        }

    @Override
    public void initPanel(MainBaseFrame main0) {
        super.initPanel(main0);
        resultStates = main.filter(main.constList,"MState");
        resultStates.sort(new Comparator<ConstValue>() {
            @Override
            public int compare(ConstValue o1, ConstValue o2) {
                return o1.value()-o2.value();
                }
            });
        analyseStateList.clear();
        for(ConstValue cc : resultStates)
            analyseStateList.put(cc.value(),cc.title());
        criterisList.clear();
        for (int mode = 0; mode < FFTStatistic.extremeFacade.length; mode++) {
            ExtremeFacade facade;
            try {
                facade = (ExtremeFacade)FFTStatistic.extremeFacade[mode].newInstance();
                } catch (Exception e) {
                    facade = new ExtremeNull();
                    }
                criterisList.add(facade.getTitle());
            }
        refreshAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        choice1 = new java.awt.Choice();
        AddMeasure = new javax.swing.JButton();
        Selection = new java.awt.Choice();
        jLabel1 = new javax.swing.JLabel();
        FromSelect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Linked = new java.awt.Checkbox();
        PowerLine = new java.awt.Choice();
        jLabel3 = new javax.swing.JLabel();
        Support = new java.awt.Choice();
        ProcSelection = new javax.swing.JButton();
        Refresh = new javax.swing.JButton();
        ToSelect = new javax.swing.JButton();
        MeasureList = new java.awt.Choice();
        jLabel4 = new javax.swing.JLabel();
        Params = new java.awt.Choice();
        jLabel5 = new javax.swing.JLabel();
        Results = new java.awt.Choice();
        jLabel6 = new javax.swing.JLabel();
        StateLamp = new javax.swing.JButton();
        RemoveResults = new javax.swing.JButton();
        ShowGraph = new javax.swing.JButton();
        CrearResults = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        Criteria = new java.awt.Choice();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ExpertResult = new java.awt.Choice();
        TestResult = new javax.swing.JTextField();
        SaveExpert = new javax.swing.JButton();
        ResultData = new java.awt.TextArea();

        setLayout(null);

        AddMeasure.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/upload.png"))); // NOI18N
        AddMeasure.setBorderPainted(false);
        AddMeasure.setContentAreaFilled(false);
        AddMeasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMeasureActionPerformed(evt);
            }
        });
        add(AddMeasure);
        AddMeasure.setBounds(680, 10, 40, 30);
        add(Selection);
        Selection.setBounds(90, 100, 530, 20);

        jLabel1.setText("Параметры");
        add(jLabel1);
        jLabel1.setBounds(10, 130, 70, 14);

        FromSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/up.PNG"))); // NOI18N
        FromSelect.setBorderPainted(false);
        FromSelect.setContentAreaFilled(false);
        FromSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FromSelectActionPerformed(evt);
            }
        });
        add(FromSelect);
        FromSelect.setBounds(490, 40, 40, 40);

        jLabel2.setText("Критерий");
        add(jLabel2);
        jLabel2.setBounds(10, 210, 70, 14);

        Linked.setLabel("Опора/Линия");
        Linked.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LinkedItemStateChanged(evt);
            }
        });
        add(Linked);
        Linked.setBounds(300, 40, 130, 20);

        PowerLine.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PowerLineItemStateChanged(evt);
            }
        });
        add(PowerLine);
        PowerLine.setBounds(90, 70, 190, 20);

        jLabel3.setText("Опора");
        add(jLabel3);
        jLabel3.setBounds(10, 40, 70, 14);

        Support.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SupportItemStateChanged(evt);
            }
        });
        add(Support);
        Support.setBounds(90, 40, 190, 20);

        ProcSelection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/lep500button.png"))); // NOI18N
        ProcSelection.setBorderPainted(false);
        ProcSelection.setContentAreaFilled(false);
        ProcSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcSelectionActionPerformed(evt);
            }
        });
        add(ProcSelection);
        ProcSelection.setBounds(540, 40, 35, 35);

        Refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/refresh.png"))); // NOI18N
        Refresh.setBorderPainted(false);
        Refresh.setContentAreaFilled(false);
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        add(Refresh);
        Refresh.setBounds(640, 10, 30, 30);

        ToSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/updown.png"))); // NOI18N
        ToSelect.setBorderPainted(false);
        ToSelect.setContentAreaFilled(false);
        ToSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToSelectActionPerformed(evt);
            }
        });
        add(ToSelect);
        ToSelect.setBounds(440, 40, 40, 40);
        add(MeasureList);
        MeasureList.setBounds(90, 10, 530, 20);

        jLabel4.setText("Линия");
        add(jLabel4);
        jLabel4.setBounds(10, 70, 70, 14);
        add(Params);
        Params.setBounds(90, 130, 190, 20);

        jLabel5.setText("Выборка");
        add(jLabel5);
        jLabel5.setBounds(10, 100, 70, 14);

        Results.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ResultsItemStateChanged(evt);
            }
        });
        add(Results);
        Results.setBounds(90, 170, 540, 20);

        jLabel6.setText("Измерения");
        add(jLabel6);
        jLabel6.setBounds(10, 10, 70, 14);

        StateLamp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/status_gray.png"))); // NOI18N
        StateLamp.setBorderPainted(false);
        StateLamp.setContentAreaFilled(false);
        StateLamp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StateLampActionPerformed(evt);
            }
        });
        add(StateLamp);
        StateLamp.setBounds(290, 240, 40, 40);

        RemoveResults.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/remove.png"))); // NOI18N
        RemoveResults.setBorderPainted(false);
        RemoveResults.setContentAreaFilled(false);
        RemoveResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveResultsActionPerformed(evt);
            }
        });
        add(RemoveResults);
        RemoveResults.setBounds(640, 160, 30, 30);

        ShowGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/graph.png"))); // NOI18N
        ShowGraph.setBorderPainted(false);
        ShowGraph.setContentAreaFilled(false);
        ShowGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowGraphActionPerformed(evt);
            }
        });
        add(ShowGraph);
        ShowGraph.setBounds(720, 160, 40, 40);

        CrearResults.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/clear.png"))); // NOI18N
        CrearResults.setBorderPainted(false);
        CrearResults.setContentAreaFilled(false);
        CrearResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearResultsActionPerformed(evt);
            }
        });
        add(CrearResults);
        CrearResults.setBounds(680, 160, 30, 30);

        jLabel7.setText("Результаты");
        add(jLabel7);
        jLabel7.setBounds(10, 170, 70, 14);

        Criteria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CriteriaItemStateChanged(evt);
            }
        });
        add(Criteria);
        Criteria.setBounds(90, 210, 190, 20);

        jLabel8.setText("Оценка эксперта");
        add(jLabel8);
        jLabel8.setBounds(300, 210, 110, 14);

        jLabel9.setText("Оценка алг.");
        add(jLabel9);
        jLabel9.setBounds(10, 250, 70, 14);
        add(ExpertResult);
        ExpertResult.setBounds(420, 210, 170, 20);

        TestResult.setEnabled(false);
        add(TestResult);
        TestResult.setBounds(90, 250, 190, 25);

        SaveExpert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/save.png"))); // NOI18N
        SaveExpert.setBorderPainted(false);
        SaveExpert.setContentAreaFilled(false);
        SaveExpert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveExpertActionPerformed(evt);
            }
        });
        add(SaveExpert);
        SaveExpert.setBounds(600, 200, 30, 30);
        add(ResultData);
        ResultData.setBounds(420, 250, 420, 310);
    }// </editor-fold>//GEN-END:initComponents

    private void AddMeasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMeasureActionPerformed
        new UploadPanel(400, 300, main, new I_OK() {
            @Override
            public void onOK(Entity ent) {
                new APICall<MeasureFile>(main){
                    @Override
                    public Call<MeasureFile> apiFun() {
                        return main2.service2.addMeasure(main.debugToken,ent.getOid());
                        }
                    @Override
                    public void onSucess(MeasureFile oo) {
                        System.out.println(oo);
                    }
                };
            }
        });
    }//GEN-LAST:event_AddMeasureActionPerformed

    public void refreshSelection(){
        MeasureList.removeAll();
        for(MeasureFile ss : measureFiles)
            MeasureList.add(ss.getTitle());
        Selection.removeAll();
        for(MeasureFile ss : selectedFiles)
            Selection.add(ss.getTitle());
        }

    private void FromSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromSelectActionPerformed
        if(selectedFiles.size()==0)
            return;
        measureFiles.add(selectedFiles.remove(Selection.getSelectedIndex()));
        refreshSelection();
    }//GEN-LAST:event_FromSelectActionPerformed

    private void LinkedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LinkedItemStateChanged
        refreshAll();
    }//GEN-LAST:event_LinkedItemStateChanged

    private void SupportItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SupportItemStateChanged
        if (Linked.getState())
            refreshMeasure();
    }//GEN-LAST:event_SupportItemStateChanged

    private void PowerLineItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PowerLineItemStateChanged
        if (Linked.getState())
            refreshSupport();
    }//GEN-LAST:event_PowerLineItemStateChanged

    private void ProcSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcSelectionActionPerformed
        if (selectedFiles.size()==0 || params.size()==0)
            return;
        OidList  list = new OidList();
        for(MeasureFile ss : selectedFiles){
            list.oids.add(ss.getOid());
            }
        new APICall<ArrayList<AnalyseResult>>(main){
            @Override
            public Call<ArrayList<AnalyseResult>> apiFun() {
                return main2.service2.analyse(main.debugToken,params.get(Params.getSelectedIndex()).getOid(),list);
                }
            @Override
            public void onSucess(ArrayList<AnalyseResult> oo) {
                for(AnalyseResult dd : oo){
                    results.add(dd);
                }
            refreshResults();
            }
        };

    }//GEN-LAST:event_ProcSelectionActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        refreshAll();
    }//GEN-LAST:event_RefreshActionPerformed

    private void ToSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToSelectActionPerformed
        if(measureFiles.size()==0)
            return;
        selectedFiles.add(measureFiles.remove(MeasureList.getSelectedIndex()));
        refreshSelection();

    }//GEN-LAST:event_ToSelectActionPerformed

    private void StateLampActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StateLampActionPerformed
    }//GEN-LAST:event_StateLampActionPerformed

    private void RemoveResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveResultsActionPerformed
        if(results.size()==0)
            return;
        results.remove(Results.getSelectedIndex());
        refreshResults();
    }//GEN-LAST:event_RemoveResultsActionPerformed

    private void CrearResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearResultsActionPerformed
        results.clear();
        refreshResults();
    }//GEN-LAST:event_CrearResultsActionPerformed

    private void ResultsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ResultsItemStateChanged
        showOneResult();
    }//GEN-LAST:event_ResultsItemStateChanged

    private void CriteriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CriteriaItemStateChanged
        showOneResultByCriteria();
    }//GEN-LAST:event_CriteriaItemStateChanged

    private void ShowGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowGraphActionPerformed
        if (results.size()==0)
            return;
        main.sendEventPanel(EventGraph,0,0,"",results);
    }//GEN-LAST:event_ShowGraphActionPerformed

    private void SaveExpertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveExpertActionPerformed
        if (selectedResult==null)
            return;
        selectedResult.measure.setExpertResult(ExpertResult.getSelectedIndex());
        try {
            Response<JEmpty> wsr = main.service.updateEntityField(main.debugToken,"expertResult",new DBRequest(selectedResult.measure,main.gson)).execute();
            if (!wsr.isSuccessful()){
                popup("Ошибка обновления параметров  " + httpError(wsr));
                return;
                }
            else
                popup("Оценка эксперта обновлена");
            } catch (IOException e) {
                popup(e.toString());
                }
    }//GEN-LAST:event_SaveExpertActionPerformed

    private void refreshResults(){
        Results.removeAll();
        for(AnalyseResult result : results){
            Results.add(result.getTitle());
            }
        showOneResult();
        }

    private void crearOneResult(){
        URL url = getClass().getResource("/drawable/status_gray.png");
        StateLamp.setIcon(new javax.swing.ImageIcon(url));
        Criteria.removeAll();
        selectedResult=null;
        ExpertResult.removeAll();
        }
    private void showOneResultByCriteria(){
        if (selectedResult==null)
            return;
        ExtremeList extreme = selectedResult.data.get(Criteria.getSelectedIndex());
        String ss = analyseStateList.get(extreme.getTestResult());
        TestResult.setText(ss == null ? "Недопустимый результат" : ss);
        String icon = StateColors.get(extreme.getTestResult());
        if (icon==null){
            System.out.println("Не найден результат анализа: "+extreme.getTestResult());
            }
        StateLamp.setIcon(new javax.swing.ImageIcon(getClass().getResource(icon)));
        ResultData.setText("");
        ResultData.append(extreme.getTestComment()+"\n");
        ResultData.append(extreme.showExtrems(selectedResult.firstFreq,selectedResult.lastFreq,selectedResult.dFreq));
        }

    private void showOneResult(){
        crearOneResult();
        if (results.size()==0)
            return;
        selectedResult = results.get(Results.getSelectedIndex());
        if (!selectedResult.valid){
            System.out.println("Результат с ошибкой:\n"+selectedResult.message);
            }
        for(String ss : criterisList)
            Criteria.add(ss);
        for (ConstValue cc : resultStates)
            ExpertResult.add(cc.title());
        ExpertResult.select(selectedResult.measure.getExpertResult());
        showOneResultByCriteria();
        }

    private void refreshMeasure(){
        ExpertResult.removeAll();
        MeasureList.removeAll();
        measureFiles = supports.get(Support.getSelectedIndex()).getFiles();
        for(MeasureFile ss : measureFiles){
            MeasureList.add(ss.getTitle());
            }
        }
    private void refreshSupport(){
        ExpertResult.removeAll();
        Support.removeAll();
        supports.clear();
        if(lines.size()==0)
            return;
        supports = lines.get(PowerLine.getSelectedIndex()).getGroup();
        for(Support ss : supports){
            Support.add(ss.getName());
            }
        refreshMeasure();
        }

    private void refreshParams(){
        Params.removeAll();
        params.clear();
        new APICall<ArrayList<DBRequest>>(main){
            @Override
            public Call<ArrayList<DBRequest>> apiFun() {
                return main.service.getEntityList(main.debugToken,"LEP500Params", Values.GetAllModeActual,0);
                }
            @Override
            public void onSucess(ArrayList<DBRequest> oo) {
                params.clear();
                for(DBRequest dd : oo){
                    try {
                        LEP500Params param = (LEP500Params) dd.get(main.gson);
                        Params.add(param.getTitle());
                        params.add(param);
                        } catch (UniException e) {
                            System.out.println(e);
                            }
                        }
                }
            };
        }

    private void refreshAll(){
        refreshParams();
        ExpertResult.removeAll();
        Selection.removeAll();
        MeasureList.removeAll();
        PowerLine.removeAll();
        Support.removeAll();
        supports.clear();
        selectedFiles.clear();
        measureFiles.clear();
        lines.clear();
        if (!Linked.getState()){
            new APICall<ArrayList<DBRequest>>(main){
                @Override
                public Call<ArrayList<DBRequest>> apiFun() {
                    return main.service.getEntityList(main.debugToken,"MeasureFile", Values.GetAllModeActual,1);
                    }
                @Override
                public void onSucess(ArrayList<DBRequest> oo) {
                    measureFiles.clear();
                    for(DBRequest dd : oo){
                        try {
                            MeasureFile ss = (MeasureFile) dd.get(main.gson);
                            MeasureList.add(ss.getTitle());
                            measureFiles.add(ss);
                            } catch (UniException e) {
                                System.out.println(e);
                                }
                            }
                    if (lines.size()!=0){
                        refreshSupport();
                        }
                    }
                };
            }
        else{
            new APICall<ArrayList<DBRequest>>(main){
                @Override
                public Call<ArrayList<DBRequest>> apiFun() {
                    return main.service.getEntityList(main.debugToken,"PowerLine", Values.GetAllModeActual,3);
                    }
                @Override
                public void onSucess(ArrayList<DBRequest> oo) {
                    lines.clear();
                    for(DBRequest dd : oo){
                        try {
                            PowerLine line = (PowerLine) dd.get(main.gson);
                            lines.add(line);
                            PowerLine.add(line.getName());
                            } catch (UniException e) {
                                System.out.println(e);
                                }
                            }
                        if (lines.size()!=0){
                            refreshSupport();
                            }
                    }
                };
            }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddMeasure;
    private javax.swing.JButton CrearResults;
    private java.awt.Choice Criteria;
    private java.awt.Choice ExpertResult;
    private javax.swing.JButton FromSelect;
    private java.awt.Checkbox Linked;
    private java.awt.Choice MeasureList;
    private java.awt.Choice Params;
    private java.awt.Choice PowerLine;
    private javax.swing.JButton ProcSelection;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton RemoveResults;
    private java.awt.TextArea ResultData;
    private java.awt.Choice Results;
    private javax.swing.JButton SaveExpert;
    private java.awt.Choice Selection;
    private javax.swing.JButton ShowGraph;
    private javax.swing.JButton StateLamp;
    private java.awt.Choice Support;
    private javax.swing.JTextField TestResult;
    private javax.swing.JButton ToSelect;
    private java.awt.Choice choice1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
